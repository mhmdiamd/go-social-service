package communitymember

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mhmdiamd/go-social-service/domain/community"
	"github.com/mhmdiamd/go-social-service/internal/config"
	"github.com/segmentio/kafka-go"
)

type EventReaderCommunityMember interface {
	ReadCreateCommunity(ctx context.Context, topic string) error
}

type KafkaEventReaderCommunityMember struct {
	groupID string
	svc     service
}

func NewKafkaConfig(groupID string, topic string) kafka.ReaderConfig {
	return kafka.ReaderConfig{
		Brokers:  []string{config.Cfg.Kafka.Host},
		GroupID:  groupID,
		Topic:    topic,
		MinBytes: 10e3, // 10KB
		MaxBytes: 10e6, // 10MB
	}
}

func NewEventReaderCommunityMember(groupID string, svc service) EventReaderCommunityMember {
	return &KafkaEventReaderCommunityMember{
		svc:     svc,
		groupID: groupID,
	}
}

func (kc *KafkaEventReaderCommunityMember) ReadCreateCommunity(ctx context.Context, topic string) error {
	// encode data community to json first for sending as topic to kafka
	config := NewKafkaConfig(kc.groupID, topic)
	reader := kafka.NewReader(config)

	defer reader.Close()

	for {
		msg, err := reader.ReadMessage(ctx)
		if err != nil {
			panic(err)
		}

		var cm community.CommunityMember
		err = json.Unmarshal(msg.Value, &cm)
		if err != nil {
			panic(err)
		}

		req := AddCommunityMemberRequestPayload{
			Role:         CommunityMemberRole(cm.Role),
			CommunityId:  cm.CommunityId,
			UserPublicId: cm.UserPublicId.String(),
		}

		if err := kc.svc.AddMember(ctx, req); err != nil {
			return err
		}

		if err := reader.SetOffset(msg.Offset); err != nil {
			return fmt.Errorf("failed to commit offset: %w", err)
		}

		break
	}

	return nil
}
